org: dandart
app: slsdemo
service: slsdemo

docker: true

environment:
  LANG: en_GB.UTF-8
  LC_ALL: en_GB.UTF-8

provider:
  name: aws
  region: eu-west-2
  runtime: haskell
  logs:
    restApi: false

functions:
  github-pr:
    handler: slsdemo.githubpr
    name: ${self:provider.stage}-github-pr
    events:
      - http:
          path: /github
          method: get
          cors: true
          private: false
      - http:
          path: /github
          method: post
          cors: true
          private: false
  emailme:
    handler: slsdemo.emailme
    name: ${self:provider.stage}-emailme
    events:
      - http:
          path: /email
          method: get
          cors: true
          private: false

plugins:
  - serverless-haskell
  - serverless-appsync-plugin # not ready yet anyway...
  - serverless-dynamodb-local
  - serverless-appsync-offline # kills deploy (or spams with warnings)
  - serverless-offline
  - fullstack-serverless
  - serverless-s3-local
  - serverless-static # kills deploy so disable or find alternative
  - serverless-domain-manager

custom:
  haskell:
  serverless-offline:
    useDocker: true
    # useChildProcesses: true
    printOutput: true
  fullstack:
    domain: slsdemo.jolharg.com
    bucketName: slsdemo-fullstack
    distributionFolder: public
    singlePageApp: true
    apiPath: api
    clientCommand: stack run html
  custom:
  appSync:
    # name:  # defaults to api
    # apiKey # only required for update-appsync/delete-appsync
    authenticationType: API_KEY
    logConfig:
      loggingRoleArn: { Fn::GetAtt: [AppSyncLoggingServiceRole, Arn] } # Where AppSyncLoggingServiceRole is a role with CloudWatch Logs write access
      level: ERROR # Logging Level: NONE | ERROR | ALL
      excludeVerboseContent: false
    dataSources:
      - type: AMAZON_DYNAMODB
        name: users
        description: Users
        config:
          tableName: { Ref: Users } # Where MyTable is a dynamodb table defined in Resources
          serviceRoleArn: { Fn::GetAtt: [AppSyncDynamoDBServiceRole, Arn] } # Where AppSyncDynamoDBServiceRole is an IAM role defined in Resources
          iamRoleStatements: # custom IAM Role statements for this DataSource. Ignored if `serviceRoleArn` is present. Auto-generated if both `serviceRoleArn` and `iamRoleStatements` are omitted
            - Effect: "Allow"
              Action:
                - "dynamodb:GetItem"
              Resource:
                - "arn:aws:dynamodb:{REGION}:{ACCOUNT_ID}:users"
                - "arn:aws:dynamodb:{REGION}:{ACCOUNT_ID}:users/*"
  appsync-offline:
    port: 62222
    dynamodb:
      server:
        port: 8000
        inMemory: true
  #  openIdConnectConfig:
  #    issuer: google
  #    clientId:
  #    iatTTL:
  #    authTTL:
  static:
    bucket: slsdemo-static
  dynamodb:
  customDomain:
    domainName: sls.jolharg.com
    createRoute53Record: true

resources:
  Resources:
    UserTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        KeySchema:
          -
            AttributeName: handle
            KeyType: HASH
        AttributeDefinitions:
          -
            AttributeName: handle
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 10
          WriteCapacityUnits: 10
        TableName: "Users"